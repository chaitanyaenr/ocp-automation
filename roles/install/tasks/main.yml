---
- name: Install dependencies
  package:
    name: "{{ item }}"
    state: latest
  with_items:
    - golang
    - gcc
    - git
    - golang-bin
    - gcc-c++
    - python-pip

- name: Install awscli
  pip:
    name: awscli

- name: create gopath dir
  file:
    path: "{{ GOPATH | default('/root/.go') }}"
    state: directory

- name: set workdir
  set_fact:
    workdir: "{{ GOPATH }}/src/github.com/openshift/installer"

- name: cleanup installer code if it exists
  file:
    path: "{{ workdir }}"
    state: absent

- name: cleanup vars file
  file:
    path: /tmp/ocp-env.sh
    state: absent

- name: get the installer and its dependencies
  shell: go get "{{ item }}"
  with_items:
    - github.com/openshift/installer/data
  environment:
     GOPATH: "{{ GOPATH }}"

- name: create .aws dir
  file:
    path: "{{ ansible_env.HOME }}/.aws"
    state: directory

- name: aws config
  template:
     src: config.j2
     dest: "{{ ansible_env.HOME }}/.aws/config"

- name: aws credentials
  template:
     src: credentials.j2
     dest: "{{ ansible_env.HOME }}/.aws/credentials"

- name: build installer binary
  shell: cd {{ workdir }}; hack/build.sh
  environment:
     GOPATH: "{{ GOPATH }}"

# TMP FIX till all the fixes land in the installer
#- name: copy the patched binary
#  shell: cp /root/openshift-install "{{ workdir }}/bin/"

- name: copy the config script to /tmp
  copy:
    src : config.py
    dest: /tmp/config.py

- name: setup install-config
  template:
     src: install-config.yaml.j2
     dest: "{{ workdir }}/install-config.yaml"

- name: set the cluster name, number of master and worker node count
  shell: python /tmp/config.py install-config "{{ workdir }}/install-config.yaml" -master_count {{ OPENSHIFT_INSTALL_MASTER_COUNT }} -worker_count {{ OPENSHIFT_INSTALL_WORKER_COUNT }} -cluster_name {{ OPENSHIFT_INSTALL_CLUSTER_NAME }}

  #- name: manifests
  #shell: "cd {{ workdir }}; bin/openshift-install create manifests"

  #- name: set the instance type of master nodes
  #shell: python /tmp/config.py master_instances "{{ workdir }}/openshift/99_openshift-cluster-api_master-machines.yaml" -master_instance_type {{ OPENSHIFT_INSTALL_MASTER_INSTANCE_FLAVOR }}

  #- name: set the instance type of worker nodes
  #shell: python /tmp/config.py worker_instances "{{ workdir }}/openshift/99_openshift-cluster-api_worker-machineset.yaml" -worker_instance_type {{ OPENSHIFT_INSTALL_WORKER_INSTANCE_FLAVOR }}

- name: ignition configs
  shell: "cd {{ workdir }};  OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE={{ OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE }} _OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE={{ OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE }} bin/openshift-install create ignition-configs"

- name: set the user in ignition configs
  replace:
    path: "{{ item }}"
    regexp: "core"
    replace: "{{ OPENSHIFT_INSTALL_USER }}"
  with_items:
     - "{{ workdir }}/bootstrap.ign"
     - "{{ workdir }}/master.ign"
     - "{{ workdir }}/worker.ign"

- name: create openshift install log dir
  file:
    path: "{{ OPENSHIFT_INSTALL_LOG_DIR }}"
    state: directory

- block:
    - name: download the image
      get_url:
        url: "{{ OPENSHIFT_IMAGE_URL }}"
        dest: /root/rhcos-qemu.qcow2.gz

    - name: run openshift installer on libvirt
      shell: "cd {{ workdir }}; OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE={{ OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE }} _OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE={{ OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE }} bin/openshift-install create cluster --log-level=debug 2>&1 | tee -a {{ OPENSHIFT_INSTALL_LOG_DIR }}/install.log"
      when: (OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE is defined) and (OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE != "")     

    - name: run openshift installer on libvirt
      shell: "cd {{ workdir }}; bin/openshift-install create cluster --log-level=debug 2>&1 | tee -a {{ OPENSHIFT_INSTALL_LOG_DIR }}/install.log"
      when: (OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE is undefined) or (OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE == "")
  when: OPENSHIFT_INSTALL_PLATFORM == "libvirt"

- block:
    - name: run openshift installer on aws
      shell: "cd {{ workdir }}; export OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE={{ OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE }}; export _OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE={{ OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE }}; bin/openshift-install create cluster --log-level=debug 2>&1 | tee -a {{ OPENSHIFT_INSTALL_LOG_DIR }}/install.log"
      when: (OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE is defined) and (OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE != "") 

    - name: run openshift installer on aws
      shell: "cd {{ workdir }}; bin/openshift-install create cluster --log-level=debug 2>&1 | tee -a {{ OPENSHIFT_INSTALL_LOG_DIR }}/install.log"
      when: (OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE is undefined) or (OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE == "")

    - name: sleep for sometime for the cluster to settle
      pause:
        minutes: 3
  when: OPENSHIFT_INSTALL_PLATFORM == "aws"
